#!/usr/bin/python
# encoding: utf-8
'''
upload_redis -- upload data into redis


@author:     recsearch

@copyright:  2014 Emar. All rights reserved.

@license:    commercial

@contact:    recsearch@emar.com

# Ver : 1.01
# Update Time : 2014-12-09
# Fix & Bugs :
# 1. fix read line with '\n' using strip()

'''
import os,sys,redis
from jpype import *
import logging,time
import logging.config
from optparse import OptionParser

# LOGGER CONFIGURATION #
logging.config.fileConfig('/data/rsworkspace/imagesearch/conf/logging.conf')
# create logger
logger = logging.getLogger('Atom@Redis')
# LOGGER END #


__all__ = []
__version__ = 1.01
__date__ = '2014-10-16'
__updated__ = '2014-12-09'



########################################
# PATH & PARAMETER CONFIGURATION
########################################
HOME = "/data/rsworkspace/imagesearch/"
BIN = HOME + "bin/"
LIB = HOME + "lib/"

########################################
# REDIS CONFIGURATION
########################################
redis_key_prefix = "gwk:imgsimilar:urlmd5:"

master_redis_caches=[("192.168.5.131", 6379),
                     ("192.168.5.137", 6379),
                     ("192.168.5.138", 6379),
                     ("192.168.5.149", 6379)]

redis_clients=[ redis.StrictRedis(host=rIP, port=rPort) \
                for (rIP,rPort) in master_redis_caches ]
# Java Classpath
jvmpath = getDefaultJVMPath()

startJVM(jvmpath, "-ea", "-Djava.class.path=" + LIB + "RedisUtils-1.0.jar")

JDClass = JClass("com.emar.recsearch.utils.RedisUtils")

EXPIRE_THREE_DAYS = 3 * 24 * 60 *60
'''Command line options.'''

program_name = os.path.basename(sys.argv[0])
program_version = "v%s" % __version__
program_build_date = "%s" % __updated__

program_version_string = '%%prog %s (%s)' % (program_version,
                                             program_build_date)
#program_usage = '''usage: spam two eggs'''
# optional - will be autogenerated by optparse
program_longdesc = ''''''
# optional - give further explanation about what the program does
# magic format here, i cannot understande why if i shrink the space
# between the last '\' with (Emar)\n
program_license = "Copyright 2014 recsearch (Emar)\n                \
Licensed under the Apache License 2.0\n      \
http://www.apache.org/licenses/LICENSE-2.0"

# setup option parser
parser = OptionParser(version=program_version_string,
                      epilog=program_longdesc,
                      description=program_license)
parser.add_option("-i", "--in", dest="infile",
                  help="set input path [default: %default]",
                  metavar="FILE")

# set defaults
# parser.set_defaults(infile="result.txt")

# process options
(opts, args) = parser.parse_args()

if opts.infile:
    logger.info("input file = %s" % opts.infile)
    infile = opts.infile
else:
    logger.error("Please specify a input file!")
    sys.exit(-1)


# MAIN BODY #
logger.info("********************START PROGRAM********************")
start = time.time()
source_file = infile

# get name sequentially
with open(source_file,'r') as file:
    names = [",".join(line.split('\t')[0:2]) for line in file]

count = 0
# read and upload key & values
with open(source_file,'r') as file:
    for line in file:
        tokens = line.strip().split('\t')
        # key: prefix + md5
        key = redis_key_prefix + tokens[0]
        # value: md5,merchant_id,distance\1 ...
        value = '\1'.join(map(lambda pair: \
                                names[int(pair[0])] + ',' + pair[1] , \
                                [pair.split(':') for pair in tokens[2::]]))
        db_ind = JDClass.getBKDRHash(key) % 4
		
        #upload to redis

        redis_clients[db_ind].set(key,value)
        redis_clients[db_ind].expire(key,EXPIRE_THREE_DAYS)
        
        if count % 1000 == 0:
            # print key
            # print value
            print count
            # print("%s : %d"%(key, redis_clients[db_ind].ttl(key)))
            # print 'amount : ', len(tokens) - 2
        count +=1
logger.info("upload to redis for file %s done!"% source_file)
logger.info("Elasped Time : %s" % str(time.time() - start))
logger.info("********************END PROGRAM********************")
